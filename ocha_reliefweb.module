<?php

/**
 * @file
 * Module file for the OCHA ReliefWeb module.
 */

declare(strict_types=1);

use Drupal\file\FileInterface;
use Drupal\ocha_reliefweb\Helpers\ClassHelper;
use Drupal\ocha_reliefweb\Helpers\UuidHelper;
use Drupal\ocha_reliefweb\ReliefWebBundleEntityInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 *
 * Add bundle classes to OCHA ReliefWeb classes to handle business logic.
 */
function ocha_reliefweb_entity_bundle_info_alter(array &$bundles): void {
  $namespace = '\Drupal\ocha_reliefweb\Entity';

  foreach ($bundles as $entity_type_id => $items) {
    if ($entity_type_id === 'reliefweb_resource') {
      foreach ($items as $bundle => $info) {
        $class = ClassHelper::classExists($namespace, 'ReliefWeb' . ucfirst($bundle));
        if ($class === FALSE) {
          $class = ClassHelper::classExists($namespace, $entity_type_id . 'Base');
        }
        if ($class !== FALSE && is_subclass_of($class, ReliefWebBundleEntityInterface::class)) {
          $label = ucwords(str_replace(['_', '-'], ' ', $bundle));
          $bundles[$entity_type_id][$bundle]['class'] = $class;
          $bundles[$entity_type_id][$bundle]['label'] = $label;
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for files.
 *
 * Change the URI of files to use their UUID.
 */
function ocha_reliefweb_file_presave(FileInterface $file) {
  $uuid = $file->uuid();
  $uri = $file->getFileUri();
  if (empty($uuid) || empty($uri)) {
    return;
  }

  // Skip temporary files.
  if (strpos($uri, 'temporary://') === 0) {
    return;
  }

  // Only process files attached to ReliefWeb submissions.
  // @todo retrieve that from the configuration.
  if (strpos($uri, 'public://reliefweb-submissions/') !== 0) {
    return;
  }

  // If the file UUID is version 5 UUID then it means it has already been
  // processed.
  if (UuidHelper::isUuidV5($uuid)) {
    return;
  }

  // Let other modules decide if this should apply.
  $apply = TRUE;
  $clone = clone $file;
  \Drupal::moduleHandler()->alter('ocha_reliefweb_file_presave', $clone, $apply);
  if (!$apply) {
    return;
  }

  // Only process files with a valid uuid and uri and if not already processed
  // which can be determined by looking for the file uuid in its uri.
  $file_system = \Drupal::service('file_system');
  $logger = \Drupal::logger('ocha_reliefweb');

  // Note: the locale is assumed to be UTF-8.
  $info = pathinfo($uri);
  $directory = $info['dirname'];

  // The ReliefWeb resource UUID is the folder containing the file.
  // @see \Drupal\ocha_reliefweb\Plugin\Field\FieldWidget\ReliefWebResourceContentReportWdiget::addAttachmentsFormElement()
  $resource_uuid = basename($directory);
  if (!UuidHelper::isUuidValid($resource_uuid)) {
    $logger->warning('Invalid entity UUID for: @uri', [
      '@uri' => $uri,
    ]);
    return;
  }

  // We use the UUID as filename, preserving only the extension so that
  // the URI is short and predictable.
  $new_uri = rtrim($directory, '/') . '/' . $uuid . '.' . strtolower($info['extension']);

  // Prepare the destination directory.
  if (!$file_system->prepareDirectory($directory, $file_system::CREATE_DIRECTORY)) {
    $logger->warning('Unable to create the destination directory: @directory', [
      '@directory' => $directory,
    ]);
    return;
  }

  // Move the file.
  if (!$file_system->move($uri, $new_uri, $file_system::EXISTS_ERROR)) {
    $logger->warning('Unable to move file @uri to @new_uri', [
      '@uri' => $uri,
      '@new_uri' => $new_uri,
    ]);
    return;
  }

  // Update the URI if the file could be moved.
  $file->setFileUri($new_uri);

  // Generate the permanent UUID for the file based on the new generated URI
  // and the UUID of the entity the file is attached to.
  $url = $file->createFileUrl(FALSE);
  $new_uuid = UuidHelper::generateUuidV5($resource_uuid, $url);

  $file->set('uuid', $new_uuid);
}

/**
 * Implements hook_preprocess_page_title().
 */
function ocha_reliefweb_preprocess_page_title(array &$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  if ($route_name === 'entity.reliefweb_resource.canonical') {
    $entity = $route_match->getParameter('reliefweb_resource');
    if ($entity->bundle->entity->isPageTitleDisabled()) {
      $variables['title'] = new HtmlEscapedText('');
    }
  }
}
